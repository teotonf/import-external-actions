name: Execute terraform

description: Runs terraform init, upgrade, plan, apply or destory 

inputs:
  tf_state_out:
    description: The output directory of the terraform state
    required: true
  repository_name:
    description: The name of the repository
    required: true
  repository_owner:
    description: The owner of the repository
    required: true
  gh_token:
    description: The GitHub token
    required: true
  gh_repo_description:
    description: The description of the repository
    required: true
  gh_repo_visibility:
    description: Visibility of the repository
    required: true
    type: string
  gh_pub_key_location: 
    description: Read only public key location
    required: true
    type: string
  create_repo:
    description: True to create the repository, false to just see the Terraform plan
    type: boolean
    required: true
  remove_repo:
    description: True to already create the repository, false to just see the Terraform plan
    type: boolean
    required: true

runs:
  using: composite
  steps:
    - name: Terraform Init
      shell: bash
      id: tf-init
      run: |
        # Configure the terraform state
        cat <<EOF > /tmp/backend.hcl
        path = "${{ inputs.tf_state_out }}/${{ inputs.repository_name }}/terraform.tfstate"
        EOF

        TF_OUT_DIR=${{ inputs.tf_state_out }}/${{ inputs.repository_name }}
        [ -d $TF_OUT_DIR ] || mkdir -p $TF_OUT_DIR

        # [ ! -f ${{ inputs.tf_state_out }}/${{ inputs.repository_name }}/terraform.tfstate ] && \
        TF_DATA_DIR=$TF_OUT_DIR/.terraform terraform -chdir=terraform init -backend-config=/tmp/backend.hcl

        echo "tf_out_dir=$TF_OUT_DIR" >> $GITHUB_OUTPUT

    - name: Terraform Plan
      shell: bash
      id: tf-plan
      run: |
        TF_OUT_DIR=${{ steps.tf-init.outputs.tf_out_dir }}
        PLAN_OUTPUT=$TF_OUT_DIR/tf-plan

        TF_DATA_DIR=$TF_OUT_DIR/.terraform \
        TF_VAR_gh_repository_name=${{ inputs.repository_name }} \
        TF_VAR_gh_repository_owner=${{ inputs.repository_owner }} \
        TF_VAR_gh_admin_token=${{ inputs.gh_token }} \
        TF_VAR_visibility="${{ inputs.gh_repo_visibility }}" \
        TF_VAR_gh_repo_description="${{ inputs.gh_repo_description }}" \
        TF_VAR_gh_ssh_key="${{ inputs.gh_pub_key_location }}" \
        terraform -chdir=terraform plan -out=$PLAN_OUTPUT

        echo "plan_location=$PLAN_OUTPUT" >> $GITHUB_OUTPUT

    - name: Terraform apply (Create)
      if: ${{ ( inputs.create_repo == true || inputs.create_repo == 'true' ) && ( inputs.remove_repo == false || inputs.remove_repo == 'false' ) }}
      run: |
        echo "Creating repository"

        TF_DATA_DIR=${{ steps.tf-init.outputs.tf_out_dir }}/.terraform \
        terraform -chdir=terraform apply -auto-approve ${{ steps.tf-plan.outputs.plan_location }}

    - name: Terraform destroy (Remove)
      if: ${{ ( inputs.remove_repo == true || inputs.remove_repo == 'true' ) && ( inputs.create_repo == false || inputs.create_repo == 'false' ) }}
      run: |
        TF_DATA_DIR=${{ steps.tf-init.outputs.tf_out_dir }}/.terraform \
        TF_VAR_gh_repository_name=${{ inputs.repository_name }} \
        TF_VAR_gh_repository_owner=${{ inputs.repository_owner }} \
        TF_VAR_gh_admin_token=${{ inputs.gh_token }} \
        TF_VAR_visibility="${{ inputs.gh_repo_visibility }}" \
        TF_VAR_gh_repo_description="${{ inputs.gh_repo_description }}" \
        TF_VAR_gh_ssh_key="${{ inputs.gh_pub_key_location }}" \
        terraform -chdir=terraform destroy -auto-approve
